import re
from pathlib import Path

def extract_variable(content, var_name):
    """
    Extracts a Makefile-style variable, supports both:
    - Single line: VAR = a b c
    - Multi-line: VAR = \n a \n b \n c
    """
    lines = []
    capture = False
    for line in content.splitlines():
        if capture:
            if line.strip().endswith("\\"):
                lines.append(line.strip().rstrip("\\").strip())
            else:
                lines.append(line.strip())
                break
        elif re.match(rf"^{var_name}\s*=", line):
            value = line.split("=", 1)[1].strip()
            if value.endswith("\\"):
                capture = True
            elif value:
                return value.split()
    return lines

def extract_single_value(content, var_name):
    match = re.search(rf"^{var_name}\s*=\s*(.+)$", content, re.MULTILINE)
    return match.group(1).strip() if match else ""

def write_cmake_list(file, name, items, cmake_list_dir=True):
    file.write(f"# {name.replace('_', ' ').title()}\n")
    file.write(f"set({name}\n")
    for item in items:
        file.write(f"    {item}\n")
    file.write(")\n")
    if cmake_list_dir:
        file.write(f'list(TRANSFORM {name} PREPEND "${{CMAKE_CURRENT_LIST_DIR}}/")\n\n')
    else:
        file.write("\n")

def main():
    makefile_path = Path("Makefile")
    output_path = makefile_path.with_name("target.cmake")

    with makefile_path.open("r", encoding="utf-8") as f:
        content = f.read()

    c_sources = extract_variable(content, "C_SOURCES")
    asm_sources = extract_variable(content, "ASM_SOURCES")
    asmm_sources = extract_variable(content, "ASMM_SOURCES")
    all_sources = c_sources + asm_sources + asmm_sources

    includes = extract_variable(content, "C_INCLUDES")
    includes = [i.lstrip("-I") for i in includes if i.startswith("-I")]

    defines = extract_variable(content, "C_DEFS")
    defines = [d.lstrip("-D") for d in defines if d.startswith("-D")]

    cpu     = extract_single_value(content, "CPU")
    fpu     = extract_single_value(content, "FPU")
    float_abi = extract_single_value(content, "FLOAT-ABI")
    cpu_flags = f"{cpu} -mthumb {fpu} {float_abi}".strip()

    ldscript = extract_single_value(content, "LDSCRIPT")

    with output_path.open("w", encoding="utf-8") as f:
        f.write("############################################################################\n")
        f.write("# DO NOT MODIFY! This file is autogenerated with scripts/prepare_target.py #\n")
        f.write("############################################################################\n\n")
        f.write("# CPU architecture and compiler flags\n")
        f.write(f'set(CPU_FLAGS "{cpu_flags}")\n\n')
        f.write("# Linker script path\n")
        f.write(f'set(LINKER_SCRIPT "${{CMAKE_CURRENT_LIST_DIR}}/{ldscript}")\n\n')
        write_cmake_list(f, "TARGET_DEFS", defines, cmake_list_dir=False)
        write_cmake_list(f, "TARGET_SOURCES", all_sources)
        write_cmake_list(f, "TARGET_INCLUDES", includes)

    print(f"target.cmake written with:")
    print(f" * {len(all_sources)} sources")
    print(f" * {len(includes)} includes")
    print(f" * {len(defines)} defines")
    print(f" * CPU_FLAGS: {cpu_flags}")
    print(f" * LDSCRIPT: {ldscript}")
    print('\n')

if __name__ == "__main__":
    main()
